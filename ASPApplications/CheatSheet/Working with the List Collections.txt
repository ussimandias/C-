Working with the List Collection
================================
Use Generic collections to work with items in a strongly typed fashion.

			Better than Arrays:
			-------------------
Know the type of the item for a certainty, no casting / no converting
Better performance inserting / removing / updating
Collections provide more flexible options to access items in the collection
Allows for LINQ extention methods

Many different collection - specialities
=========================================
"Generic Collections"
List<T>
Dictionary<TKey, Tvalue>
T => data type you need
"You make a generic specific by providing a data type."

	List<string> - only store strings (strongly typed)
	List<Car> - only store Cars in that collection

//Assume i have three objects: car1, car2, car3
	List<Car> cars = new List<Car>()
	cars.Add(car1)
	cars.Add(car2)
	cars.Add(car3)

	int numberOfCars = cars.Count;
	Car myCar = cars.Element(1); // Returns 2nd car in the collection

//Terminology: You access a MEMBER of a collection

// LINQ queries
