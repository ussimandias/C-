Manipulating Strings.
====================
//Escape double quotes
	string myString = "This is a double quote: \".";

//Accessing a specific char:
	myString[2]

	StartsWith(), EndsWith(), Contains()
//Check to see if a given string has a set of of characters
//begining, end or somewhere inside.

	IndexOf()
//Find the index for one string inside of another string.
	int myIndex = myString.IndexOf("howdy");

	Index(), Remove()
//Insert adds characters starting at a given index
//Remove removes characters starting at a given index, and all
//the way through the length you input.

	Substring()
//Retrieve characters beginning at a given index
//all the way through the length you input.

	Trim(), TrimStart(), TrimEnd()
//Remove space characters both, or just the start or the end of 
//the string.

	PadLeft(), PadRight()
//Allows you to specify a length for a string and character to 
//pad the string with if its length is less than the specified
//lenght.

	myString = someValue.PadLeft(10, '#')
//Notice that we're inputting a char, not a string
//therefore we have to use a single quote ' not a double quote.

	ToUpper(), ToLower()
//Important! Compare two strings regardless of the case,
//because in C#, two strings with different cases are NOT equal.

	Replace()
//Replace every occurance of one string with some other string.
	myString.Replace("$$$", myValue);

	Split()
//Take a string and split it into many strings
//and store them in a string array.
	string names = myString.Split(';');

//Concatenating strings, immutability
	StringBuilder = memory efficient way of concatenating strings.